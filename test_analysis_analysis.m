
% Electromagnetic Gun Simulation Analysis Script
% Auto-generated by Python MATLAB Bridge

% Load simulation data
load('test_analysis.mat');

% Extract data
results = simulation_results;
time_ms = results.time * 1000;  % Convert to milliseconds
position_mm = results.position * 1000;  % Convert to millimeters
velocity = results.velocity;
force = results.force;
energy = results.kinetic_energy;

% Create comprehensive analysis plots
figure('Position', [100, 100, 1200, 800]);

% Plot 1: Position vs Time
subplot(2, 3, 1);
plot(time_ms, position_mm, 'b-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Position (mm)');
title('Capsule Position');
grid on;

% Plot 2: Velocity vs Time
subplot(2, 3, 2);
plot(time_ms, velocity, 'r-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Velocity (m/s)');
title('Capsule Velocity');
grid on;

% Plot 3: Force vs Time
subplot(2, 3, 3);
plot(time_ms, force, 'g-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Force (N)');
title('Electromagnetic Force');
grid on;

% Plot 4: Energy vs Time
subplot(2, 3, 4);
plot(time_ms, energy, 'm-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Energy (J)');
title('Kinetic Energy');
grid on;

% Plot 5: Velocity vs Position
subplot(2, 3, 5);
plot(position_mm, velocity, 'c-', 'LineWidth', 2);
xlabel('Position (mm)');
ylabel('Velocity (m/s)');
title('Phase Space (v vs x)');
grid on;

% Plot 6: Power vs Time (Force * Velocity)
subplot(2, 3, 6);
power = force .* velocity;
plot(time_ms, power, 'k-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Power (W)');
title('Instantaneous Power');
grid on;

% Add overall title
sgtitle(sprintf('Electromagnetic Gun Analysis - Final Velocity: %.2f m/s', ...
    results.final_velocity), 'FontSize', 14);

% Print summary statistics
fprintf('\n=== SIMULATION SUMMARY ===\n');
fprintf('Final Velocity: %.3f m/s\n', results.final_velocity);
fprintf('Final Position: %.1f mm\n', results.final_position * 1000);
fprintf('Total Time: %.2f ms\n', results.total_time * 1000);
fprintf('Max Force: %.1f N\n', results.max_force);
fprintf('Energy Efficiency: %.1f%%\n', results.energy_efficiency * 100);
fprintf('Max Power: %.1f W\n', max(power));
fprintf('========================\n\n');

% Calculate additional metrics
acceleration = diff(velocity) ./ diff(results.time);
max_acceleration = max(acceleration);
fprintf('Maximum Acceleration: %.1f m/s²\n', max_acceleration);

% Save figure
savefig('simulation_analysis.fig');
print('simulation_analysis.png', '-dpng', '-r300');

fprintf('Analysis complete. Plots saved as simulation_analysis.fig and .png\n');
