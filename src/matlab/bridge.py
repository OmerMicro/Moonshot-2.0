"""
Basic MATLAB Bridge for electromagnetic gun simulation.

Quick implementation - focuses on data exchange and basic functionality.
"""

import numpy as np
import json
import os
from typing import Dict, Any, Optional
from scipy.io import savemat, loadmat


class MatlabBridge:
    """
    Basic MATLAB bridge for simulation data exchange.
    
    Quick implementation gaps:
    - No real MATLAB engine integration (requires matlab.engine)
    - No direct function calling
    - Limited to file-based data exchange
    - Basic .mat file support only
    """
    
    def __init__(self, matlab_path: Optional[str] = None):
        """
        Initialize MATLAB bridge.
        
        Args:
            matlab_path: Path to MATLAB installation (not used in quick version)
        """
        self.matlab_path = matlab_path
        self.matlab_available = False
        
        # Try to detect MATLAB (quick check)
        self._check_matlab_availability()
    
    def _check_matlab_availability(self):
        """Check if MATLAB is available (basic implementation)."""
        try:
            # Quick implementation: just check if scipy is available for .mat files
            import scipy.io
            self.matlab_available = True
        except ImportError:
            self.matlab_available = False
    
    def export_simulation_to_mat(self, result, filename: str):
        """
        Export simulation results to MATLAB .mat file.
        
        Args:
            result: SimulationResult object
            filename: Output .mat file path
        """
        if not self.matlab_available:
            raise RuntimeError("MATLAB bridge not available - scipy required")
        
        # Convert simulation result to MATLAB-compatible format
        matlab_data = {
            'simulation_results': {
                'final_velocity': result.final_velocity,
                'final_position': result.final_position,
                'total_time': result.total_time,
                'initial_energy': result.initial_energy,
                'final_kinetic_energy': result.final_kinetic_energy,
                'max_force': result.max_force,
                'energy_efficiency': result.energy_efficiency,
                
                # Time series data
                'time': result.get_time_array(),
                'position': result.get_position_array(),
                'velocity': result.get_velocity_array(),
                'force': result.get_force_array(),
                'kinetic_energy': result.get_energy_array(),
                
                # Metadata
                'data_points': len(result.history),
                'export_timestamp': np.datetime64('now').astype(str)
            }
        }
        
        try:
            savemat(filename, matlab_data)
            print(f"Simulation data exported to MATLAB file: {filename}")
        except Exception as e:
            raise RuntimeError(f"Failed to export to MATLAB: {e}")
    
    def import_parameters_from_mat(self, filename: str) -> Dict[str, Any]:
        """
        Import simulation parameters from MATLAB .mat file.
        
        Args:
            filename: Input .mat file path
            
        Returns:
            Dictionary of simulation parameters
        """
        if not self.matlab_available:
            raise RuntimeError("MATLAB bridge not available - scipy required")
        
        try:
            matlab_data = loadmat(filename)
            
            # Extract parameters (basic implementation)
            params = {}
            if 'simulation_params' in matlab_data:
                for key, value in matlab_data['simulation_params'].items():
                    if isinstance(value, np.ndarray) and value.size == 1:
                        params[key] = float(value.item())
                    else:
                        params[key] = value
            
            return params
        except Exception as e:
            raise RuntimeError(f"Failed to import from MATLAB: {e}")
    
    def create_matlab_analysis_script(self, mat_filename: str, script_filename: str):
        """
        Create a basic MATLAB analysis script for the exported data.
        
        Args:
            mat_filename: Name of the .mat file to analyze
            script_filename: Output MATLAB script filename
        """
        script_content = f"""
% Electromagnetic Gun Simulation Analysis Script
% Auto-generated by Python MATLAB Bridge

% Load simulation data
load('{mat_filename}');

% Extract data
results = simulation_results;
time_ms = results.time * 1000;  % Convert to milliseconds
position_mm = results.position * 1000;  % Convert to millimeters
velocity = results.velocity;
force = results.force;
energy = results.kinetic_energy;

% Create comprehensive analysis plots
figure('Position', [100, 100, 1200, 800]);

% Plot 1: Position vs Time
subplot(2, 3, 1);
plot(time_ms, position_mm, 'b-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Position (mm)');
title('Capsule Position');
grid on;

% Plot 2: Velocity vs Time
subplot(2, 3, 2);
plot(time_ms, velocity, 'r-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Velocity (m/s)');
title('Capsule Velocity');
grid on;

% Plot 3: Force vs Time
subplot(2, 3, 3);
plot(time_ms, force, 'g-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Force (N)');
title('Electromagnetic Force');
grid on;

% Plot 4: Energy vs Time
subplot(2, 3, 4);
plot(time_ms, energy, 'm-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Energy (J)');
title('Kinetic Energy');
grid on;

% Plot 5: Velocity vs Position
subplot(2, 3, 5);
plot(position_mm, velocity, 'c-', 'LineWidth', 2);
xlabel('Position (mm)');
ylabel('Velocity (m/s)');
title('Phase Space (v vs x)');
grid on;

% Plot 6: Power vs Time (Force * Velocity)
subplot(2, 3, 6);
power = force .* velocity;
plot(time_ms, power, 'k-', 'LineWidth', 2);
xlabel('Time (ms)');
ylabel('Power (W)');
title('Instantaneous Power');
grid on;

% Add overall title
sgtitle(sprintf('Electromagnetic Gun Analysis - Final Velocity: %.2f m/s', ...
    results.final_velocity), 'FontSize', 14);

% Print summary statistics
fprintf('\\n=== SIMULATION SUMMARY ===\\n');
fprintf('Final Velocity: %.3f m/s\\n', results.final_velocity);
fprintf('Final Position: %.1f mm\\n', results.final_position * 1000);
fprintf('Total Time: %.2f ms\\n', results.total_time * 1000);
fprintf('Max Force: %.1f N\\n', results.max_force);
fprintf('Energy Efficiency: %.1f%%\\n', results.energy_efficiency * 100);
fprintf('Max Power: %.1f W\\n', max(power));
fprintf('========================\\n\\n');

% Calculate additional metrics
acceleration = diff(velocity) ./ diff(results.time);
max_acceleration = max(acceleration);
fprintf('Maximum Acceleration: %.1f m/sÂ²\\n', max_acceleration);

% Save figure
savefig('simulation_analysis.fig');
print('simulation_analysis.png', '-dpng', '-r300');

fprintf('Analysis complete. Plots saved as simulation_analysis.fig and .png\\n');
"""
        
        try:
            with open(script_filename, 'w') as f:
                f.write(script_content)
            print(f"MATLAB analysis script created: {script_filename}")
        except Exception as e:
            raise RuntimeError(f"Failed to create MATLAB script: {e}")
    
    def export_for_matlab_analysis(self, result, base_filename: str):
        """
        Complete export package for MATLAB analysis.
        
        Args:
            result: SimulationResult object
            base_filename: Base name for output files (without extension)
        """
        mat_file = f"{base_filename}.mat"
        script_file = f"{base_filename}_analysis.m"
        
        # Export data
        self.export_simulation_to_mat(result, mat_file)
        
        # Create analysis script
        self.create_matlab_analysis_script(mat_file, script_file)
        
        print(f"\\nMATLAB package created:")
        print(f"  Data file: {mat_file}")
        print(f"  Analysis script: {script_file}")
        print(f"\\nTo analyze in MATLAB:")
        print(f"  1. Open MATLAB")
        print(f"  2. Navigate to this directory")
        print(f"  3. Run: {base_filename}_analysis")


def export_to_matlab(result, filename: str):
    """Quick function to export simulation results to MATLAB."""
    bridge = MatlabBridge()
    bridge.export_for_matlab_analysis(result, filename)